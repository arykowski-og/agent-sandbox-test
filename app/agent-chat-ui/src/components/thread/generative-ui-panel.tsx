"use client";

import { Fragment, useEffect, useRef } from "react";
import { useStreamContext } from "@/providers/Stream";
import { LoadExternalComponent } from "@langchain/langgraph-sdk/react-ui";
import { useArtifact } from "./artifact";

export function GenerativeUIPanel() {
  const stream = useStreamContext();
  const artifact = useArtifact();
  const { values } = useStreamContext();
  const scrollContainerRef = useRef<HTMLDivElement>(null);
  const prevComponentCountRef = useRef(0);

  // Get all UI components from the stream
  const allUIComponents = values.ui || [];

  // Filter out any UI components that shouldn't be displayed
  const displayableUIComponents = allUIComponents.filter(
    (ui) => ui && ui.metadata?.message_id
  );

  // Auto-scroll to new components when they're added
  useEffect(() => {
    const currentCount = displayableUIComponents.length;
    const prevCount = prevComponentCountRef.current;
    
    // If we have new components, scroll to the top of the newest component
    if (currentCount > prevCount && currentCount > 0) {
      const scrollContainer = scrollContainerRef.current;
      if (scrollContainer) {
        // Use a small delay to ensure the new component is rendered
        setTimeout(() => {
          // Find the newest component (last one in the list)
          const newestComponentElement = scrollContainer.querySelector(`[data-component-index="${currentCount - 1}"]`);
          if (newestComponentElement) {
            // Scroll so the top of the new component is at the top of the visible area
            const containerRect = scrollContainer.getBoundingClientRect();
            const componentRect = newestComponentElement.getBoundingClientRect();
            const scrollTop = scrollContainer.scrollTop + (componentRect.top - containerRect.top);
            
            scrollContainer.scrollTo({
              top: scrollTop,
              behavior: 'smooth'
            });
          } else {
            // Fallback: scroll to bottom if we can't find the specific component
            scrollContainer.scrollTo({
              top: scrollContainer.scrollHeight,
              behavior: 'smooth'
            });
          }
        }, 100);
      }
    }
    
    // Update the previous count
    prevComponentCountRef.current = currentCount;
  }, [displayableUIComponents.length]);

  if (!displayableUIComponents.length) {
    return (
      <div className="flex h-full items-center justify-center p-8">
        <div className="text-center text-gray-500">
          <div className="mb-4 text-lg font-medium">Generative UI Panel</div>
          <div className="text-sm">
            Interactive components generated by the LLM will appear here
          </div>
        </div>
      </div>
    );
  }

  return (
    <div 
      ref={scrollContainerRef}
      className="h-full overflow-y-auto p-4"
    >
      <div className="mb-4">
        <h2 className="text-lg font-semibold text-gray-800">
          Generated Components
        </h2>
        <p className="text-sm text-gray-600">
          Interactive UI components from your conversation
        </p>
      </div>
      
      <div className="space-y-4">
        {displayableUIComponents.map((uiComponent, index) => (
          <div
            key={uiComponent.id}
            data-component-index={index}
            className="rounded-lg border bg-white p-4 shadow-sm"
          >
            <LoadExternalComponent
              stream={stream}
              message={uiComponent}
              meta={{ ui: uiComponent, artifact }}
            />
          </div>
        ))}
      </div>
    </div>
  );
} 